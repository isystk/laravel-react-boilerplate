{
  "compilerOptions": {
    /* 基本オプション */
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "target": "es2015", /* ECMAScriptのターゲットバージョンを指定します: 'ES3'（デフォルト）, 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018'または 'ESNEXT' */
    "module": "esnext", /* モジュールコード生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015',または 'ESNext'を指定します。targetがes3かes5ならcommonjsとなる。 */
    "moduleResolution": "node", /*モジュールの解決方法をNode.jsに指定します。 */
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    // "incremental": true, /* 変更されたファイルのみを再コンパイルしてビルドを高速化できます。 */
    "jsx": "preserve",
    // strict オプション
    "strict": true, /* すべての strict オプションを有効にします。 */
    "noImplicitAny": true, /* 暗黙の 'any'型で式と宣言のエラーを発生させます。 */
    "noImplicitThis": true, /* 暗黙の 'any'型で 'this'式のエラーを発生させます。 */
    "alwaysStrict": true, /* 厳密なモードで解析し,各ソースファイルに対して "use strict"を発行します。 */
    "strictBindCallApply": true, /* null または undefined でないことが保証されていない場合、関数の呼び出しに apply や call メソッドを使えなくなります。 */
    "strictNullChecks": true, /* 厳密なヌルチェックを有効にします。 */
    "strictFunctionTypes": true, /* 関数型の厳密なチェックを有効にします。 */
    "strictPropertyInitialization": true, /* クラスのプロパティ初期化の厳密なチェックを有効にします。 */
    "useUnknownInCatchVariables": true, /* catch ブロックのパラメータ名に未定義の型を許容するかどうかを制御する */// 追加チェック
    "noUncheckedIndexedAccess": true, /* 配列やオブジェクトのインデックスアクセスで undefined が返される可能性がある場合に、コンパイルエラーを発生させる */
    "exactOptionalPropertyTypes": true, /* オプショナルプロパティに明示的にundefinedを代入することを出来なくする */
    "noImplicitReturns": true, /* 関数が明示的に戻り値を設定していない場合にコンパイルエラーを発生させます。 */
    "noFallthroughCasesInSwitch": true, /* switch ステートメントを使用する際に、ある case 節ごとに break 文が記述されていない場合に、警告を出力する。 */
    "noImplicitOverride": true, /* オーバーライドには必ずoverride修飾子を付けなければならない */
    "forceConsistentCasingInFileNames": true, /* ファイル名が大文字小文字の混在をしている場合に、TypeScript コンパイラが警告を出します。 */
    "noUnusedLocals": true, /* 未使用のローカル変数がある場合にはコンパイルエラーが発生します。 */
    "noUnusedParameters": true, /* 使用されていない関数パラメータを警告して、コードの最適化を促進します。 */// CommonJS 対策
    "allowSyntheticDefaultImports": true, /* CommonJSやAMDといったモジュールシステムを使う場合に、import文のdefault importが存在しない場合に自動で生成するかどうかを制御する */
    "esModuleInterop": true, /* CommonJS モジュールのエクスポートを ES6 モジュールのインポートに変換するために、特別なランタイム関数を使用します */// その他
    "skipLibCheck": true, /* *.d.ts 型定義ファイルに対する型チェックをスキップします。 */
    "removeComments": true, /* コンパイル時にコメントを削除します */
    "isolatedModules": true, /* 変換されたJavaScriptは、それぞれのファイルが個別のモジュールとして扱われ、変数名などもファイル名に基づいたものになるため、ファイル同士の衝突が回避されます。 */
    "sourceMap": true, /* コンパイルが行われると .map ファイルが生成されます。デバッグ時に TypeScript のコードを読みやすくすることができます。 */
    "allowJs": false, /* ".js" ファイルを TypeScript として認識するようになります。 */
    "resolveJsonModule": true, /* import/requireを使用して JSON ファイルを読み込むことができます。 */
    "noEmit": true, /* このオプションを使うことで、コンパイル済みのファイルをプロジェクトから削除することができ、ビルドプロセスを最適化することができます。 */
    "incremental": true
  },
  "exclude": [
    "node_modules"
  ],
  "include": [
    "next-env.d.ts",
    "jest.config.js",
    "next.config.js",
    "next-env.d.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "test/**/*.ts"
  ]
}
